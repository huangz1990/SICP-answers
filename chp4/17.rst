练习 4.17
============

多出的框架是 let 语句构造的。

let 语句构造的框架直接指向外部 lambda 函数在运行时构造的框架，且在该框架中除了约束形式参数之外，没有任何实际语句的执行，因此除了 let 构造的框架可以指向该框架外，没有其他任何框架可以直接指向它，从效果上来看，可以认为 let 构造的框架完全代理了外部 lambda 函数在运行时构造的框架，因此可以将这两个框架看成是一个整体，这也就相当于并没有增加额外的框架，因此环境结构的这种差异并不会造成正确程序的不同行为方式。

为了不额外增加该框架，可以去掉 let 语句，而是直接将内部定义添加到外部 lambda 函数的形式参数中，这些形式参数具有默认值 *unassigned*。为此，我们还需要定义一种可以有默认值参数的 lambda 函数，(注意以下语法为作者定义，并未查阅R5RS标准)，该 lambda 表达式结构不变

::

  (lambda <vars> body)

但在形式参数列表中，可以在参数列表 **最后** 添加序对形式的具有默认值的参数，

::

  (var . default)

其中 var 是形式参数名，default 是默认值，在调用该 lambda 语句时，若对这些参数提供了实际参数，则应用实际参数，否则使用默认参数。这样课本中的例子可以这样改写

::

  (lambda (vars (u . '*unassigned*) (v . '*unassigned*))
    (set! u <e1>)
    (set! v <e2>)
    <e3>)

这样内部定义的作用域仍然是整个 lambda 函数的体，但是却不用构造额外的框架。




